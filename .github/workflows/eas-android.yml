name: EAS Android Build & Submit

on:
  workflow_dispatch:

jobs:
  build-and-submit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      NODE_VERSION: "20"
      PROJECT_DIR: "."                 # Expo project is at repo root
      TRACK: "internal"                # internal | alpha | beta | production
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"
      NPM_CONFIG_AUDIT: "false"
      HAS_PLAY_KEY: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Install deps (works with or without a lockfile)
      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile || yarn install
          elif [ -f pnpm-lock.yaml ]; then
            corepack enable
            pnpm install --frozen-lockfile || pnpm install
          else
            if [ -f package-lock.json ]; then
              npm ci --no-fund || npm i --no-fund
            else
              npm i --package-lock-only --no-fund
              npm i --no-fund
            fi
          fi

      # Ensure AJV v8 + ajv-keywords v5 WITHOUT overrides (avoids EOVERRIDE)
      - name: Ensure AJV v8 stack
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          npm uninstall ajv-keywords || true
          npm i -D ajv@^8.12.0 ajv-keywords@^5.1.0 --no-fund
          npm ls ajv || true
          npm ls ajv-keywords || true

      - name: Install EAS CLI
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm i -D eas-cli

      # ---- Normalize eas.json so 'production' is NOT a dev-client build, and pin CLI + appVersionSource
      - name: Normalize EAS config (cli.version, appVersionSource, production.developmentClient=false)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f "eas.json" ]; then
            node - <<'NODE'
            const fs = require('fs');
            const p = 'eas.json';
            let obj = {};
            try { obj = JSON.parse(fs.readFileSync(p, 'utf8')); } catch {}
            obj.cli = obj.cli || {};
            // Pin a
