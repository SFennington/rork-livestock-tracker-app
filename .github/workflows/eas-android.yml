name: EAS Android Build & Submit

on:
  workflow_dispatch:

jobs:
  build-and-submit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      NODE_VERSION: "20"
      PROJECT_DIR: "."                 # Expo project is at repo root
      TRACK: "internal"                # internal | alpha | beta | production
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"
      NPM_CONFIG_AUDIT: "false"
      HAS_PLAY_KEY: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Install deps (works with or without a lockfile)
      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile || yarn install
          elif [ -f pnpm-lock.yaml ]; then
            corepack enable
            pnpm install --frozen-lockfile || pnpm install
          else
            if [ -f package-lock.json ]; then
              npm ci --no-fund || npm i --no-fund
            else
              npm i --package-lock-only --no-fund
              npm i --no-fund
            fi
          fi

      # Ensure AJV v8 + ajv-keywords v5 WITHOUT overrides (avoids EOVERRIDE)
      - name: Ensure AJV v8 stack
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          # remove any stale ajv-keywords so we can re-install cleanly
          npm uninstall ajv-keywords || true
          # install the compatible pair explicitly
          npm i -D ajv@^8.12.0 ajv-keywords@^5.1.0 --no-fund
          # sanity print
          npm ls ajv || true
          npm ls ajv-keywords || true

      - name: Install EAS CLI
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm i -D eas-cli

      - name: EAS login
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: npx eas whoami || true

      # Validate config early (helps catch bad paths/env)
      - name: Validate & print resolved Expo config
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          NODE_ENV: production
          APP_ENV: ci
        run: npx --yes expo@latest config --type public

      - name: Build Android AAB
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_DEBUG: "1"
        run: npx eas build --platform android --profile production --non-interactive --wait --log-level debug

      - name: Show latest EAS build (always)
        if: always()
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: npx eas build:list --limit 1 || true

      - name: Write Play service account JSON (if provided)
        if: ${{ env.HAS_PLAY_KEY != '' }}
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          printf "%s" "${HAS_PLAY_KEY}" > google-play-key.json
          test -s google-play-key.json && echo "Key written."

      - name: Submit to Google Play (auto)
        if: ${{ env.HAS_PLAY_KEY != '' }}
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: npx eas submit --platform android --latest --track "${{ env.TRACK }}" --key google-play-key.json --non-interactive

      - name: Submission skipped note
        if: ${{ env.HAS_PLAY_KEY == '' }}
        run: echo "No PLAY_SERVICE_ACCOUNT_JSON secret; submission skipped. Download AAB from the EAS build page."

      - name: Upload npm logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs
          path: /home/runner/.npm/_logs/
          if-no-files-found: ignore
