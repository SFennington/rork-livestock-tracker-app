name: EAS Android Build & Submit

on:
  workflow_dispatch:

jobs:
  build-and-submit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      NODE_VERSION: "20"
      PROJECT_DIR: "."         # your app lives in ./app
      TRACK: "internal"          # internal | alpha | beta | production
      HAS_PLAY_KEY: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}  # expose secret for if: checks
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"
      NPM_CONFIG_AUDIT: "false"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Pin AJV stack (CI hotfix)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          npm pkg set "overrides.ajv=^8.12.0"
          npm pkg set "overrides.ajv-keywords=^5.1.0"
          npm pkg set "overrides.schema-utils=^4.2.0"
          npm i -D ajv@^8.12.0 ajv-keywords@^5.1.0

      - name: Show project files
        working-directory: ${{ env.PROJECT_DIR }}
        run: ls -la

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          # Prefer lockfile if present; otherwise regular install.
          if [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile || yarn install
          elif [ -f pnpm-lock.yaml ]; then
            corepack enable
            pnpm install --frozen-lockfile || pnpm install
          else
            if [ -f package-lock.json ]; then
              npm ci --no-fund || npm ci --no-fund --legacy-peer-deps || npm i --no-fund --legacy-peer-deps
            else
              # Create a lockfile with legacy resolution, then install
              npm i --package-lock-only --no-fund --legacy-peer-deps
              npm ci --no-fund --legacy-peer-deps
            fi
          fi

      - name: Install EAS CLI
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm i -D eas-cli

      - name: EAS login
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: npx eas whoami || true
        
      - name: Show Expo versions
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          node -v
          npm -v
          npx expo --version || npx --yes expo@latest --version
          node -e "try{console.log('expo dep:', require('./package.json').dependencies.expo)}catch(e){console.log('no expo in package.json')}"

      - name: Validate & print resolved Expo config
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          # Provide safe defaults in CI to avoid env-based crashes in app.config.*
          NODE_ENV: production
          APP_ENV: ci
        run: |
          # This will fail early if your config throws (missing env, bad JSON, etc.)
          npx --yes expo@latest config --type public

      - name: Build Android AAB
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          EXPO_DEBUG: "1"
        run: npx eas build --platform android --profile production --non-interactive --wait --log-level debug


      - name: Write Play service account JSON (if provided)
        if: ${{ env.HAS_PLAY_KEY != '' }}
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          printf "%s" "${HAS_PLAY_KEY}" > google-play-key.json
          test -s google-play-key.json && echo "Key written."

      - name: Submit to Google Play (auto)
        if: ${{ env.HAS_PLAY_KEY != '' }}
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: npx eas submit --platform android --latest --track "${{ env.TRACK }}" --key google-play-key.json --non-interactive

      - name: Submission skipped note
        if: ${{ env.HAS_PLAY_KEY == '' }}
        run: echo "No PLAY_SERVICE_ACCOUNT_JSON secret; submission skipped. Download AAB from the EAS build page."
